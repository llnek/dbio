;; Copyright (c) 2013-2017, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(ns ^{:doc "DDL functions for Oracle."
      :author "Kenneth Leung"}

  czlab.horde.dbddl.oracle

  (:require [czlab.xlib.str :refer [strbf<>]]
            [czlab.xlib.logging :as log])

  (:use [czlab.horde.dbddl.drivers]
        [czlab.xlib.core]
        [czlab.horde.dbio.core]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;(set! *warn-on-reflection* true)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
(defn- createSeq
  ""
  [dbtype model field]
  (let [s (gSQLId (str "S_"
                       (:table model) "_" (:column field)))
        t (gSQLId (str "T_"
                       (:table model) "_" (:column field)))]
    (str "create sequence "
         s
         " start with 1 increment by 1"
         (genExec dbtype)
         "\n\n"
         "create or replace trigger "
         t
         "\n"
         "before insert on "
         (gtable model)
         "\n"
         "referencing new as new\n"
         "for each row\n"
         "begin\n"
         "select "
         s
         ".nextval into :new."
         (gcolumn field) " from dual;\n"
         "end" (genExec dbtype) "\n\n")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Oracle
(defmethod getTSDefault Oracle [_] "default systimestamp")
(defmethod getStringKwd Oracle [_] "varchar2")
(defmethod getLongKwd Oracle [_] "number(38)")
(defmethod getDoubleKwd Oracle [_] "binary_double")
(defmethod getFloatKwd Oracle [_] "binary_float")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
(defn- maybeTrackFields
  ""
  [model field]
  (if (or (= "12c+" (*ddl-cfg* :db-version))
          (= "12c" (*ddl-cfg* :db-version)))
    false
    (let [m (deref *ddl-bvs*)
          t (:id model)
          r (or (m t) {})]
      (->> (assoc r (:id field) field)
           (swap! *ddl-bvs*  assoc t))
      true)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
(defn- autoXXX
  [dbtype model fld]
  (str (getPad dbtype)
       (genCol fld)
       " "
       "number generated by default on null as identity"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
(defmethod genAutoInteger
  Oracle
  [dbtype model field]
  (if (maybeTrackFields model field)
    (genInteger dbtype field)
    (autoXXX dbtype model field)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
(defmethod genAutoLong
  Oracle
  [dbtype model field]
  (if (maybeTrackFields model field)
    (genLong dbtype field)
    (autoXXX dbtype model field)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
(defmethod genEndSQL
  Oracle
  [dbtype]
  (if (or (= "12c+" (*ddl-cfg* :db-version))
          (= "12c" (*ddl-cfg* :db-version)))
    ""
    (sreduce<>
      (fn [bd [model fields]]
        (reduce
          (fn [bd [_ fld]]
            (.append ^StringBuilder
                     bd
                     (createSeq dbtype model fld)))
          bd
          fields))
      (deref *ddl-bvs*))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
(defmethod genDrop
  Oracle
  [dbtype model]
  (str "drop table "
       (gtable model)
       " cascade constraints purge"
       (genExec dbtype) "\n\n"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF



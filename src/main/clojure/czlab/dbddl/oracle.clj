;; Licensed under the Apache License, Version 2.0 (the "License");
;; you may not use this file except in compliance with the License.
;; You may obtain a copy of the License at
;;
;;     http://www.apache.org/licenses/LICENSE-2.0
;;
;; Unless required by applicable law or agreed to in writing, software
;; distributed under the License is distributed on an "AS IS" BASIS,
;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;; See the License for the specific language governing permissions and
;; limitations under the License.
;;
;; Copyright (c) 2013-2016, Kenneth Leung. All rights reserved.

(ns ^{:doc "DDL functions for Oracle"
      :author "kenl" }

  czlab.dbddl.oracle

  (:require [czlab.xlib.logging :as log])

  (:use [czlab.dbddl.drivers]
        [czlab.dbio.core]))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;(set! *warn-on-reflection* true)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
(defn- createSeq

  ""
  [dbtype model field]

  (let [s (gSQLId (str "S_" (:table model) "_" (:column field)))
        t (gSQLId (str "T_" (:table model) "_" (:column field)))]
    (str "create sequence "
         s
         " start with 1 increment by 1"
         (genExec dbtype)
         "\n\n"
         "create or replace trigger "
         t
         "\n"
         "before insert on "
         (gtable model)
         "\n"
         "referencing new as new\n"
         "for each row\n"
         "begin\n"
         "select "
         s
         ".nextval into :new."
         (gcolumn field) " from dual;\n"
         "end" (genExec dbtype) "\n\n")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Oracle
(defmethod getTSDefault Oracle [_] "default systimestamp")
(defmethod getStringKwd Oracle [_] "varchar2")
(defmethod getLongKwd Oracle [_] "number(38)")
(defmethod getDoubleKwd Oracle [_] "binary_double")
(defmethod getFloatKwd Oracle [_] "binary_float")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
(defn- maybeTrackFields

  ""
  [model field]

  (if (or (= "12c+" (*DDL_CFG* :db-version))
          (= "12c" (*DDL_CFG* :db-version)))
    false
    (let [m (deref *DDL_BVS*)
          t (:id model)
          r (or (m t) {})]
      (->> (assoc r (:id field) field)
           (swap! *DDL_BVS*  assoc t))
      true)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
(defn- auto-xxx

  [dbtype model fld]

  (str (getPad dbtype)
       (genCol fld)
       " "
       "number generated by default on null as identity"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
(defmethod genAutoInteger

  Oracle

  [dbtype model field]

  (if (maybeTrackFields model field)
    (genInteger dbtype field)
    (auto-xxx dbtype model field)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
(defmethod genAutoLong

  Oracle

  [dbtype model field]

  (if (maybeTrackFields model field)
    (genLong dbtype field)
    (auto-xxx dbtype model field)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
(defmethod genEndSQL

  Oracle

  [dbtype]

  (if (or (= "12c+" (*DDL_CFG* :db-version))
          (= "12c" (*DDL_CFG* :db-version)))
    ""
    (str
      (reduce
        (fn [bd [model fields]]
          (reduce
            (fn [^StringBuilder bd [_ fld]]
              (.append bd (createSeq dbtype model fld)))
            bd
            fields))
        (StringBuilder.)
        (deref *DDL_BVS*)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
(defmethod genDrop

  Oracle

  [dbtype model]

  (str "drop table "
       (gtable model)
       " cascade constraints purge"
       (genExec dbtype) "\n\n"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF


